/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : phonetic
 #	author : miyako
 #	2016/08/02
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- phonetic

		case 1 :
			Phonetic(pResult, pParams);
			break;

	}
}

// ----------------------------------- phonetic -----------------------------------


void Phonetic(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	// --- write the code of Phonetic here...
	
#if VERSIONMAC
	NSString *sourceText = Param1.copyUTF16String();
	NSMutableString *outputTextHiragana = [[NSMutableString alloc]init];
	CFLocaleRef locale = CFLocaleCopyCurrent();
	CFRange range = CFRangeMake(0, [sourceText length]);
	
	CFStringTokenizerRef tokenizer = CFStringTokenizerCreate(kCFAllocatorDefault,
																													 (CFStringRef)sourceText,
																													 range,
																													 kCFStringTokenizerUnitWordBoundary,
																													 locale);
	CFStringTokenizerTokenType tokenType = CFStringTokenizerGoToTokenAtIndex(tokenizer, 0);
	while (tokenType != kCFStringTokenizerTokenNone)
	{
		range = CFStringTokenizerGetCurrentTokenRange(tokenizer);
		CFTypeRef latinTranscription = CFStringTokenizerCopyCurrentTokenAttribute(tokenizer, kCFStringTokenizerAttributeLatinTranscription);
		if(latinTranscription)
		{
			NSMutableString *hiragana = [(NSString *)latinTranscription mutableCopy];
			CFStringTransform((CFMutableStringRef)hiragana, NULL, kCFStringTransformLatinHiragana, false);
			CFRelease(latinTranscription);
			[outputTextHiragana appendString:hiragana];
		}
		tokenType = CFStringTokenizerAdvanceToNextToken(tokenizer);
	}
	CFRelease(tokenizer);
	CFRelease(locale);
	
	returnValue.setUTF16String(outputTextHiragana);
	[outputTextHiragana release];
	[sourceText release];

#endif

	returnValue.setReturn(pResult);
}

